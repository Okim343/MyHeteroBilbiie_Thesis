//------------------------------------------------
// main.mod   – drives the whole pipeline
//------------------------------------------------

@#include "declarations_bcycle.mod"      // var … varexo … parameters …

model;
  @#include "equations_bcycle.mod"
end;


steady_state_model; // This manually inserted from the ss object generated by the julia code in get_steadystate.jl since Dynare.jl doesnt support julia function calls yet
  // 1) Aggregate steady state
  w    = 0.07088341400728024;
  L    = 0.16343831422502822;
  r    = 0.04166666666666674;
  C    = 0.18970045071668803;
  Le   = 0.11694585895313409;
  Lc   = 0.046492455271894134;
  Y    = 0.02346088936000504;

// 2) Sectoral steady state (I = 9)
  M1   = 0.000768447043266132;
  M2   = 0.001113712490984185;
  M3   = 0.001272357429141859;
  M4   = 0.001400487219731566;
  M5   = 0.001492360008470554;
  M6   = 0.0015614975831362396;
  M7   = 0.0016192922014880897;
  M8   = 0.0016476124085252435;
  M9   = 0.0016300937950771348;

  C1   = 5.056480328686643e-5;
  C2   = 0.00012829781790270106;
  C3   = 0.00024003083272686418;
  C4   = 0.00046826148062496104;
  C5   = 0.0008767786338271498;
  C6   = 0.0016054460668454744;
  C7   = 0.0030270314903619415;
  C8   = 0.005212260311993192;
  C9   = 0.03351945850136439;

  rho1 = 0.07721812744408017;
  rho2 = 0.08816091800673742;
  rho3 = 0.0924553042540984;
  rho4 = 0.095678417184787;
  rho5 = 0.09787440699510112;
  rho6 = 0.09947027698398471;
  rho7 = 0.10076980943179639;
  rho8 = 0.10139572904055177;
  rho9 = 0.1010093649798328;

  psi1 = 6.695543835344936e-5;
  psi2 = 7.633283199106575e-5;
  psi3 = 7.05898713977429e-5;
  psi4 = 6.079815353954058e-5;
  psi5 = 5.088239276662062e-5;
  psi6 = 4.18866932361947e-5;
  psi7 = 3.361915945439087e-5;
  psi8 = 2.730215755419061e-5;
  psi9 = 1.2110527779411359e-5;

  v1   = 0.11341346241164835;
  v2   = 0.19855298041254965;
  v3   = 0.32515327526275334;
  v4   = 0.5762879187583758;
  v5   = 1.012620200104003;
  v6   = 1.7720853501820055;
  v7   = 3.221973363967283;
  v8   = 5.452570308252326;
  v9   = 35.44170700364011;

  d1   = 0.017316127763596523;
  d2   = 0.030315349726184392;
  d3   = 0.04964486170755884;
  d4   = 0.08798845408331568;
  d5   = 0.15460828360354037;
  d6   = 0.27056449630619567;
  d7   = 0.49193544782944676;
  d8   = 0.8325061424806022;
  d9   = 5.411289926123914;

  e1   = 0.0001310345534189134;
  e2   = 0.00033247330515904665;
  e3   = 0.0006220202775178975;
  e4   = 0.0012134613408633197;
  e5   = 0.0022721001420493285;
  e6   = 0.004160382217127866;
  e7   = 0.00784430460995363;
  e8   = 0.013507146431687026;
  e9   = 0.08686293607535706;

  y1   = 0.06580128550166678;
  y2   = 0.11519832895950068;
  y3   = 0.18865047448872357;
  y4   = 0.33435612551659954;
  y5   = 0.5875114776934534;
  y6   = 1.0281450859635435;
  y7   = 1.8693547017518974;
  y8   = 3.1635233414262878;
  y9   = 20.56290171927087;

  l1   = 0.04700818232587241;
  l2   = 0.09839386119747918;
  l3   = 0.1715183848993918;
  l4   = 0.3179149612714941;
  l5   = 0.5756275804880783;
  l6   = 1.0290889071526073;
  l7   = 1.903348108928317;
  l8   = 3.2543955028807448;
  l9   = 21.33205984214666;

  L1   = 0.0001671578521365453;
  L2   = 0.00044205577741084334;
  L3   = 0.0008402529687790514;
  L4   = 0.001658697181085503;
  L5   = 0.0031311437229424015;
  L6   = 0.005767302058478976;
  L7   = 0.010926381359458358;
  L8   = 0.01886912884448209;
  L9   = 0.12163619446025445;

  Y1   = 2.51552464183168e-5;
  Y2   = 6.509700634312849e-5;
  Y3   = 0.0001227260076691445;
  Y4   = 0.00024080082442721372;
  Y5   = 0.0004526773762578203;
  Y6   = 0.0008312918665808034;
  Y7   = 0.0015710864478096906;
  Y8   = 0.002709155722364662;
  Y9   = 0.01744289886213426;  

  // 3) Exogenous state shifters
  Z     = 1.0;
  Zlag  = 1.0;
  fE    = fE_par;
  X     = 1.0;

  // 4) Log variables for IRFs

    @#for i in 1:I
        logM@{i} = log(M@{i});
        logC@{i} = log(C@{i});
        logd@{i} = log(d@{i});
        logv@{i} = log(v@{i});
        loge@{i} = log(e@{i});
        logy@{i} = log(y@{i});
        logrho@{i} = log(rho@{i});
        logl@{i} = log(l@{i});
        logL@{i} = log(L@{i});
        logY@{i} = log(Y@{i});
    @#endfor

    Yr = 
      @#for i in 1:I
        + (Y@{i}/rho@{i})
      @#endfor
      ;
  
    Cr = (
      @#for i in 1:I
      + (C@{i}/rho@{i})^((eta-1)/eta)
      @#endfor
      )^(eta/(eta-1))
      ;

    Ir =
      @#for i in 1:I
        + ((e@{i}*v@{i})/rho@{i})
      @#endfor
      ;

    logC = log(C);
    logw = log(w);
    logL = log(L);
    logLe = log(Le);
    logLc = log(Lc);
    logY = log(Y);
    logYr = log(Yr);
    logCr = log(Cr);
    logIr = log(Ir);


end;

@#include "calibration_bcycle.mod"       // parameter numbers, shocks, initval …

// -------- Solve & simulate --------

check;

// model_info ;
// model_diagnostics;


stoch_simul(order=1, irf=75, noprint) ;


